//`default_nettype none
//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================

module DE10_NANO_SOC_FB(

    //////////// CLOCK //////////
    input                           FPGA_CLK1_50,
    input                           FPGA_CLK2_50,
    input                           FPGA_CLK3_50,

    //////////// HDMI //////////
    inout                           HDMI_I2C_SCL,
    inout                           HDMI_I2C_SDA,
    inout                           HDMI_I2S,
    inout                           HDMI_LRCLK,
    inout                           HDMI_MCLK,
    inout                           HDMI_SCLK,
    output                          HDMI_TX_CLK,
    output            [23:0]        HDMI_TX_D,
    output                          HDMI_TX_DE,
    output                          HDMI_TX_HS,
    input                           HDMI_TX_INT,
    output                          HDMI_TX_VS,

    //////////// HPS //////////
    inout                           HPS_CONV_USB_N,
    output            [14:0]        HPS_DDR3_ADDR,
    output             [2:0]        HPS_DDR3_BA,
    output                          HPS_DDR3_CAS_N,
    output                          HPS_DDR3_CK_N,
    output                          HPS_DDR3_CK_P,
    output                          HPS_DDR3_CKE,
    output                          HPS_DDR3_CS_N,
    output             [3:0]        HPS_DDR3_DM,
    inout             [31:0]        HPS_DDR3_DQ,
    inout              [3:0]        HPS_DDR3_DQS_N,
    inout              [3:0]        HPS_DDR3_DQS_P,
    output                          HPS_DDR3_ODT,
    output                          HPS_DDR3_RAS_N,
    output                          HPS_DDR3_RESET_N,
    input                           HPS_DDR3_RZQ,
    output                          HPS_DDR3_WE_N,
    output                          HPS_ENET_GTX_CLK,
    inout                           HPS_ENET_INT_N,
    output                          HPS_ENET_MDC,
    inout                           HPS_ENET_MDIO,
    input                           HPS_ENET_RX_CLK,
    input              [3:0]        HPS_ENET_RX_DATA,
    input                           HPS_ENET_RX_DV,
    output             [3:0]        HPS_ENET_TX_DATA,
    output                          HPS_ENET_TX_EN,
    inout                           HPS_GSENSOR_INT,
    inout                           HPS_I2C0_SCLK,
    inout                           HPS_I2C0_SDAT,
    inout                           HPS_I2C1_SCLK,
    inout                           HPS_I2C1_SDAT,
    inout                           HPS_KEY,
    inout                           HPS_LED,
    inout                           HPS_LTC_GPIO,
    output                          HPS_SD_CLK,
    inout                           HPS_SD_CMD,
    inout              [3:0]        HPS_SD_DATA,
    output                          HPS_SPIM_CLK,
    input                           HPS_SPIM_MISO,
    output                          HPS_SPIM_MOSI,
    inout                           HPS_SPIM_SS,
    input                           HPS_UART_RX,
    output                          HPS_UART_TX,
    input                           HPS_USB_CLKOUT,
    inout              [7:0]        HPS_USB_DATA,
    input                           HPS_USB_DIR,
    input                           HPS_USB_NXT,
    output                          HPS_USB_STP,

    //////////// KEY //////////
    input              [1:0]        KEY,

    //////////// LED //////////
    output             [7:0]        LED,

    //////////// SW //////////
    input              [3:0]        SW,
    
    //////////// GPIO_0, GPIO connect to GPIO Default //////////
    inout           [15:0]         ARDUINO_IO,
    inout             [35:0]        GPIO,
    inout            [35:0]        GPIO_1
);



//=======================================================
//  REG/WIRE declarations
//=======================================================
 wire  hps_fpga_reset_n;
  wire [1:0] fpga_debounced_buttons;
  wire [7:0]  fpga_led_internal;
  wire [2:0]  hps_reset_req;
  wire        hps_cold_reset;
  wire        hps_warm_reset;
  wire        hps_debug_reset;
  wire [27:0] stm_hw_events;
  wire           fpga_clk_50;
  wire               clk_65;
  wire               clk_130;
// connection of internal logics
  assign LED[7:0] = fpga_led_internal | {7'b0000000, led_level};
  assign fpga_clk_50=FPGA_CLK1_50;
  assign stm_hw_events    = {{15{1'b0}}, SW, fpga_led_internal, fpga_debounced_buttons};

wire [9:0] pixel_i;
wire vsync_i;
wire hsync_i;
wire slow_pclk;

//=======================================================
//  Structural coding
//=======================================================
I2C_HDMI_Config u_I2C_HDMI_Config (
    .iCLK(FPGA_CLK1_50),
    .iRST_N( 1'b1),
    .I2C_SCLK(HDMI_I2C_SCL),
    .I2C_SDAT(HDMI_I2C_SDA),
    .HDMI_TX_INT(HDMI_TX_INT)
    );

vga_pll  vga_pll_inst(
            .refclk(fpga_clk_50),   //  refclk.clk
           .rst(1'b0),      //   reset.reset
           .outclk_0(clk_65), // outclk0.clk
           .outclk_1(clk_130), // outclk1.clk
           .locked()    //  locked.export
);

assign HDMI_TX_CLK = clk_65;

soc_system u0 (
        //Clock&Reset
      .clk_clk                                  (FPGA_CLK1_50 ),                               //                            clk.clk
      .reset_reset_n                            (hps_fpga_reset_n ),                         //                          reset.reset_n
      .clk_130_clk                               (clk_130 ),                               //                            clk.clk
      .alt_vip_itc_0_clocked_video_vid_clk       (HDMI_TX_CLK ),       // alt_vip_itc_0_clocked_video.vid_clk
      .alt_vip_itc_0_clocked_video_vid_data      (HDMI_TX_D ),      //                            .vid_data
      .alt_vip_itc_0_clocked_video_underflow     ( ),     //                            .underflow
      .alt_vip_itc_0_clocked_video_vid_datavalid (HDMI_TX_DE), //                            .vid_datavalid
      .alt_vip_itc_0_clocked_video_vid_v_sync    (HDMI_TX_VS ),    //                            .vid_v_sync
      .alt_vip_itc_0_clocked_video_vid_h_sync    (HDMI_TX_HS ),    //                            .vid_h_sync
      .alt_vip_itc_0_clocked_video_vid_f         ( ),         //                            .vid_f
      .alt_vip_itc_0_clocked_video_vid_h         ( ),         //                            .vid_h
      .alt_vip_itc_0_clocked_video_vid_v         ( ),          //                            .vid_v

      //HPS ddr3
      .memory_mem_a                          ( HPS_DDR3_ADDR),                       //                memory.mem_a
      .memory_mem_ba                         ( HPS_DDR3_BA),                         //                .mem_ba
      .memory_mem_ck                         ( HPS_DDR3_CK_P),                       //                .mem_ck
      .memory_mem_ck_n                       ( HPS_DDR3_CK_N),                       //                .mem_ck_n
      .memory_mem_cke                        ( HPS_DDR3_CKE),                        //                .mem_cke
      .memory_mem_cs_n                       ( HPS_DDR3_CS_N),                       //                .mem_cs_n
      .memory_mem_ras_n                      ( HPS_DDR3_RAS_N),                      //                .mem_ras_n
      .memory_mem_cas_n                      ( HPS_DDR3_CAS_N),                      //                .mem_cas_n
      .memory_mem_we_n                       ( HPS_DDR3_WE_N),                       //                .mem_we_n
      .memory_mem_reset_n                    ( HPS_DDR3_RESET_N),                    //                .mem_reset_n
      .memory_mem_dq                         ( HPS_DDR3_DQ),                         //                .mem_dq
      .memory_mem_dqs                        ( HPS_DDR3_DQS_P),                      //                .mem_dqs
      .memory_mem_dqs_n                      ( HPS_DDR3_DQS_N),                      //                .mem_dqs_n
      .memory_mem_odt                        ( HPS_DDR3_ODT),                        //                .mem_odt
      .memory_mem_dm                         ( HPS_DDR3_DM),                         //                .mem_dm
      .memory_oct_rzqin                      ( HPS_DDR3_RZQ),                        //                .oct_rzqin
      //HPS ethernet
      .hps_0_hps_io_hps_io_emac1_inst_TX_CLK ( HPS_ENET_GTX_CLK),       //                             hps_0_hps_io.hps_io_emac1_inst_TX_CLK
      .hps_0_hps_io_hps_io_emac1_inst_TXD0   ( HPS_ENET_TX_DATA[0] ),   //                             .hps_io_emac1_inst_TXD0
      .hps_0_hps_io_hps_io_emac1_inst_TXD1   ( HPS_ENET_TX_DATA[1] ),   //                             .hps_io_emac1_inst_TXD1
      .hps_0_hps_io_hps_io_emac1_inst_TXD2   ( HPS_ENET_TX_DATA[2] ),   //                             .hps_io_emac1_inst_TXD2
      .hps_0_hps_io_hps_io_emac1_inst_TXD3   ( HPS_ENET_TX_DATA[3] ),   //                             .hps_io_emac1_inst_TXD3
      .hps_0_hps_io_hps_io_emac1_inst_RXD0   ( HPS_ENET_RX_DATA[0] ),   //                             .hps_io_emac1_inst_RXD0
      .hps_0_hps_io_hps_io_emac1_inst_MDIO   ( HPS_ENET_MDIO ),         //                             .hps_io_emac1_inst_MDIO
      .hps_0_hps_io_hps_io_emac1_inst_MDC    ( HPS_ENET_MDC  ),         //                             .hps_io_emac1_inst_MDC
      .hps_0_hps_io_hps_io_emac1_inst_RX_CTL ( HPS_ENET_RX_DV),         //                             .hps_io_emac1_inst_RX_CTL
      .hps_0_hps_io_hps_io_emac1_inst_TX_CTL ( HPS_ENET_TX_EN),         //                             .hps_io_emac1_inst_TX_CTL
      .hps_0_hps_io_hps_io_emac1_inst_RX_CLK ( HPS_ENET_RX_CLK),        //                             .hps_io_emac1_inst_RX_CLK
      .hps_0_hps_io_hps_io_emac1_inst_RXD1   ( HPS_ENET_RX_DATA[1] ),   //                             .hps_io_emac1_inst_RXD1
      .hps_0_hps_io_hps_io_emac1_inst_RXD2   ( HPS_ENET_RX_DATA[2] ),   //                             .hps_io_emac1_inst_RXD2
      .hps_0_hps_io_hps_io_emac1_inst_RXD3   ( HPS_ENET_RX_DATA[3] ),   //                             .hps_io_emac1_inst_RXD3
      //HPS SD card
      .hps_0_hps_io_hps_io_sdio_inst_CMD     ( HPS_SD_CMD    ),           //                               .hps_io_sdio_inst_CMD
      .hps_0_hps_io_hps_io_sdio_inst_D0      ( HPS_SD_DATA[0]     ),      //                               .hps_io_sdio_inst_D0
      .hps_0_hps_io_hps_io_sdio_inst_D1      ( HPS_SD_DATA[1]     ),      //                               .hps_io_sdio_inst_D1
      .hps_0_hps_io_hps_io_sdio_inst_CLK     ( HPS_SD_CLK   ),            //                               .hps_io_sdio_inst_CLK
      .hps_0_hps_io_hps_io_sdio_inst_D2      ( HPS_SD_DATA[2]     ),      //                               .hps_io_sdio_inst_D2
      .hps_0_hps_io_hps_io_sdio_inst_D3      ( HPS_SD_DATA[3]     ),      //                               .hps_io_sdio_inst_D3
      //HPS USB
      .hps_0_hps_io_hps_io_usb1_inst_D0      ( HPS_USB_DATA[0]    ),      //                               .hps_io_usb1_inst_D0
      .hps_0_hps_io_hps_io_usb1_inst_D1      ( HPS_USB_DATA[1]    ),      //                               .hps_io_usb1_inst_D1
      .hps_0_hps_io_hps_io_usb1_inst_D2      ( HPS_USB_DATA[2]    ),      //                               .hps_io_usb1_inst_D2
      .hps_0_hps_io_hps_io_usb1_inst_D3      ( HPS_USB_DATA[3]    ),      //                               .hps_io_usb1_inst_D3
      .hps_0_hps_io_hps_io_usb1_inst_D4      ( HPS_USB_DATA[4]    ),      //                               .hps_io_usb1_inst_D4
      .hps_0_hps_io_hps_io_usb1_inst_D5      ( HPS_USB_DATA[5]    ),      //                               .hps_io_usb1_inst_D5
      .hps_0_hps_io_hps_io_usb1_inst_D6      ( HPS_USB_DATA[6]    ),      //                               .hps_io_usb1_inst_D6
      .hps_0_hps_io_hps_io_usb1_inst_D7      ( HPS_USB_DATA[7]    ),      //                               .hps_io_usb1_inst_D7
      .hps_0_hps_io_hps_io_usb1_inst_CLK     ( HPS_USB_CLKOUT    ),       //                               .hps_io_usb1_inst_CLK
      .hps_0_hps_io_hps_io_usb1_inst_STP     ( HPS_USB_STP    ),          //                               .hps_io_usb1_inst_STP
      .hps_0_hps_io_hps_io_usb1_inst_DIR     ( HPS_USB_DIR    ),          //                               .hps_io_usb1_inst_DIR
      .hps_0_hps_io_hps_io_usb1_inst_NXT     ( HPS_USB_NXT    ),          //                               .hps_io_usb1_inst_NXT
        //HPS SPI
      .hps_0_hps_io_hps_io_spim1_inst_CLK    ( HPS_SPIM_CLK  ),           //                               .hps_io_spim1_inst_CLK
      .hps_0_hps_io_hps_io_spim1_inst_MOSI   ( HPS_SPIM_MOSI ),           //                               .hps_io_spim1_inst_MOSI
      .hps_0_hps_io_hps_io_spim1_inst_MISO   ( HPS_SPIM_MISO ),           //                               .hps_io_spim1_inst_MISO
      .hps_0_hps_io_hps_io_spim1_inst_SS0    ( HPS_SPIM_SS   ),             //                               .hps_io_spim1_inst_SS0
        //HPS UART
      .hps_0_hps_io_hps_io_uart0_inst_RX     ( HPS_UART_RX   ),          //                               .hps_io_uart0_inst_RX
      .hps_0_hps_io_hps_io_uart0_inst_TX     ( HPS_UART_TX   ),          //                               .hps_io_uart0_inst_TX
        //HPS I2C1
      .hps_0_hps_io_hps_io_i2c0_inst_SDA     ( HPS_I2C0_SDAT  ),        //                               .hps_io_i2c0_inst_SDA
      .hps_0_hps_io_hps_io_i2c0_inst_SCL     ( HPS_I2C0_SCLK  ),        //                               .hps_io_i2c0_inst_SCL
        //HPS I2C2
      .hps_0_hps_io_hps_io_i2c1_inst_SDA     ( HPS_I2C1_SDAT  ),        //                               .hps_io_i2c1_inst_SDA
      .hps_0_hps_io_hps_io_i2c1_inst_SCL     ( HPS_I2C1_SCLK  ),        //                               .hps_io_i2c1_inst_SCL
        //GPIO
      .hps_0_hps_io_hps_io_gpio_inst_GPIO09  ( HPS_CONV_USB_N ),  //                               .hps_io_gpio_inst_GPIO09
      .hps_0_hps_io_hps_io_gpio_inst_GPIO35  ( HPS_ENET_INT_N ),  //                               .hps_io_gpio_inst_GPIO35
      .hps_0_hps_io_hps_io_gpio_inst_GPIO40  ( HPS_LTC_GPIO   ),  //                               .hps_io_gpio_inst_GPIO40
      .hps_0_hps_io_hps_io_gpio_inst_GPIO53  ( HPS_LED   ),  //                               .hps_io_gpio_inst_GPIO53
      .hps_0_hps_io_hps_io_gpio_inst_GPIO54  ( HPS_KEY   ),  //                               .hps_io_gpio_inst_GPIO54
      .hps_0_hps_io_hps_io_gpio_inst_GPIO61  ( HPS_GSENSOR_INT ),  //                               .hps_io_gpio_inst_GPIO61
        //FPGA Partion
      .led_pio_external_connection_export    ( fpga_led_internal     ),    //    led_pio_external_connection.export
      .dipsw_pio_external_connection_export  ( SW    ),  //  dipsw_pio_external_connection.export
      .button_pio_external_connection_export ( fpga_debounced_buttons    ), // button_pio_external_connection.export
      .hps_0_h2f_reset_reset_n               ( hps_fpga_reset_n ),                //                hps_0_h2f_reset.reset_n
      .hps_0_f2h_cold_reset_req_reset_n      (~hps_cold_reset ),      //       hps_0_f2h_cold_reset_req.reset_n
     .hps_0_f2h_debug_reset_req_reset_n     (~hps_debug_reset ),     //      hps_0_f2h_debug_reset_req.reset_n
     .hps_0_f2h_stm_hw_events_stm_hwevents  (stm_hw_events ),  //        hps_0_f2h_stm_hw_events.stm_hwevents
     .hps_0_f2h_warm_reset_req_reset_n      (~hps_warm_reset ),      //       hps_0_f2h_warm_reset_req.reset_n

     //#############################
     //New stuff
    .hps_0_i2c2_scl_in_clk                                 (scl_fromcam),                                 //                       hps_0_i2c2_scl_in.clk
    .hps_0_i2c2_clk_clk                                    (scl_tocam),                                    //                          hps_0_i2c2_clk.clk
    .hps_0_i2c2_out_data                                   (sda_tocam),                                   //                              hps_0_i2c2.out_data
    .hps_0_i2c2_sda                                        (sda_fromcam), 
    
    //.ddr3_writer_simple_0_conduit_end_vsync           (vsync_i),           //                                 .vsync
    //.ddr3_writer_simple_0_conduit_end_pixel           (pixel_i),           //                                 .pixel
    //.ddr3_writer_simple_0_conduit_end_hsync           (hsync_i),           //                                 .hsync
    
    .ddr3_clk_clk                                            (ddr3_clk),                                            //                                 ddr3_clk.clk
    .ddr3_reset_reset_n                                      (ddr3_reset),                                      //                               ddr3_reset.reset_n
    
    .pclk_0_clk                                              (pclk_0),                                       //                           pclk_0.clk
    .pclk_reset_0_reset_n                                    (cam_sys_reset),                              //                     pclk_reset_0.reset_n
    .sys_0_cam_receiver_0_cam_in_conduit_hs                  (hsync_0),                  //      sys_0_cam_receiver_0_cam_in_conduit.hs
    .sys_0_cam_receiver_0_cam_in_conduit_vs                  (vsync),                  //                                         .vs
    .sys_0_cam_receiver_0_cam_in_conduit_pixel_data          (pixel_0),          //                                         .pixel_data
    //.sys_0_cam_receiver_0_frame_error_conduit_frame_error    (<connected-to-sys_0_cam_receiver_0_frame_error_conduit_frame_error>),    // sys_0_cam_receiver_0_frame_error_conduit.frame_error
    //.sys_0_ddr3_writer_remap_0_conduit_end_1_fifo_full_latch (<connected-to-sys_0_ddr3_writer_remap_0_conduit_end_1_fifo_full_latch>), //  sys_0_ddr3_writer_remap_0_conduit_end_1.fifo_full_latch
    //.sys_0_ddr3_writer_remap_0_conduit_end_1_fifo_level      (<connected-to-sys_0_ddr3_writer_remap_0_conduit_end_1_fifo_level>),      //                                         .fifo_level
    //.sys_0_debayer_0_raw_pixel_source_data                   (<connected-to-sys_0_debayer_0_raw_pixel_source_data>),                   //         sys_0_debayer_0_raw_pixel_source.data
    //.sys_0_debayer_0_raw_pixel_source_valid                  (
    .pclk_1_clk                                              (pclk_1),                                       //                           pclk_0.clk
    .pclk_reset_1_reset_n                                    (cam_sys_reset), 
    .sys_1_cam_receiver_0_cam_in_conduit_hs                  (hsync_1),                  //      sys_1_cam_receiver_0_cam_in_conduit.hs
    .sys_1_cam_receiver_0_cam_in_conduit_vs                  (vsync),                  //                                         .vs
    .sys_1_cam_receiver_0_cam_in_conduit_pixel_data          (pixel_1),          //                                         .pixel_data
    //.sys_1_cam_receiver_0_frame_error_conduit_frame_error    (<connected-to-sys_1_cam_receiver_0_frame_error_conduit_frame_error>),    // sys_1_cam_receiver_0_frame_error_conduit.frame_error
    //.sys_1_ddr3_writer_remap_0_conduit_end_1_fifo_full_latch (<connected-to-sys_1_ddr3_writer_remap_0_conduit_end_1_fifo_full_latch>), //  sys_1_ddr3_writer_remap_0_conduit_end_1.fifo_full_latch
    //.sys_1_ddr3_writer_remap_0_conduit_end_1_fifo_level      (<connected-to-sys_1_ddr3_writer_remap_0_conduit_end_1_fifo_level>),      //                                         .fifo_level
    //.sys_1_debayer_0_raw_pixel_source_data                   (<connected-to-sys_1_debayer_0_raw_pixel_source_data>),                   //         sys_1_debayer_0_raw_pixel_source.data
    //.sys_1_debayer_0_raw_pixel_source_valid                  (<connected-to-sys_1_debayer_0_raw_pixel_source_valid>),                  //                                         .valid
    .pclk_2_clk                                              (pclk_2),                                       //                           pclk_0.clk
    .pclk_reset_2_reset_n                                    (cam_sys_reset), 
    .sys_2_cam_receiver_0_cam_in_conduit_hs                  (hsync_2),                  //      sys_2_cam_receiver_0_cam_in_conduit.hs
    .sys_2_cam_receiver_0_cam_in_conduit_vs                  (vsync),                  //                                         .vs
    .sys_2_cam_receiver_0_cam_in_conduit_pixel_data          (pixel_2),          //                                         .pixel_data
    //.sys_2_cam_receiver_0_frame_error_conduit_frame_error    (<connected-to-sys_2_cam_receiver_0_frame_error_conduit_frame_error>),    // sys_2_cam_receiver_0_frame_error_conduit.frame_error
    //.sys_2_ddr3_writer_remap_0_conduit_end_1_fifo_full_latch (<connected-to-sys_2_ddr3_writer_remap_0_conduit_end_1_fifo_full_latch>), //  sys_2_ddr3_writer_remap_0_conduit_end_1.fifo_full_latch
    //.sys_2_ddr3_writer_remap_0_conduit_end_1_fifo_level      (<connected-to-sys_2_ddr3_writer_remap_0_conduit_end_1_fifo_level>),      //                                         .fifo_level
    //.sys_2_debayer_0_raw_pixel_source_data                   (<connected-to-sys_2_debayer_0_raw_pixel_source_data>),                   //         sys_2_debayer_0_raw_pixel_source.data
    //.sys_2_debayer_0_raw_pixel_source_valid                  (<connected-to-sys_2_debayer_0_raw_pixel_source_valid>),                  //                                         .valid
    .pclk_3_clk                                              (pclk_3),                                       //                           pclk_0.clk
    .pclk_reset_3_reset_n                                    (cam_sys_reset), 
    .sys_3_cam_receiver_0_cam_in_conduit_hs                  (hsync_3),                  //      sys_3_cam_receiver_0_cam_in_conduit.hs
    .sys_3_cam_receiver_0_cam_in_conduit_vs                  (vsync),                  //                                         .vs
    .sys_3_cam_receiver_0_cam_in_conduit_pixel_data          (pixel_3),          //                                         .pixel_data
    //.sys_3_cam_receiver_0_frame_error_conduit_frame_error    (<connected-to-sys_3_cam_receiver_0_frame_error_conduit_frame_error>),    // sys_3_cam_receiver_0_frame_error_conduit.frame_error
    //.sys_3_ddr3_writer_remap_0_conduit_end_1_fifo_full_latch (<connected-to-sys_3_ddr3_writer_remap_0_conduit_end_1_fifo_full_latch>), //  sys_3_ddr3_writer_remap_0_conduit_end_1.fifo_full_latch
    //.sys_3_ddr3_writer_remap_0_conduit_end_1_fifo_level      (<connected-to-sys_3_ddr3_writer_remap_0_conduit_end_1_fifo_level>),      //                                         .fifo_level
    //.sys_3_debayer_0_raw_pixel_source_data                   (<connected-to-sys_3_debayer_0_raw_pixel_source_data>),                   //         sys_3_debayer_0_raw_pixel_source.data
    //.sys_3_debayer_0_raw_pixel_source_valid                  (<connected-to-sys_3_debayer_0_raw_pixel_source_valid>)
    .sys_3_ddr3_writer_remap_0_start_address                 (32'h30000000),                 //          sys_3_ddr3_writer_remap_0_start.address
    .sys_2_ddr3_writer_remap_0_start_address                 (32'h30400000),                 //          sys_2_ddr3_writer_remap_0_start.address
    .sys_1_ddr3_writer_remap_0_start_address                 (32'h30800000),                 //          sys_1_ddr3_writer_remap_0_start.address
    .sys_0_ddr3_writer_remap_0_start_address                 (32'h30C00000),
    
    .sys_3_gray_writer_start_addr_address                    (32'h31000000),
    .sys_2_gray_writer_start_addr_address                    (32'h31400000),
    .sys_1_gray_writer_start_addr_address                    (32'h31800000),
    .sys_0_gray_writer_start_addr_address                    (32'h31C00000),

    .sys_3_remap_coords_base_address_address                (32'h21000000),        //         sys_3_remap_coords_base_address.address
    .sys_2_remap_coords_base_address_address                (32'h21400000),        //         sys_2_remap_coords_base_address.address
    .sys_1_remap_coords_base_address_address                (32'h21800000),        //         sys_1_remap_coords_base_address.address
    .sys_0_remap_coords_base_address_address                (32'h21C00000),         //         sys_0_remap_coords_base_address.address
    
    .ddr3_reader_gray_out_0_pixel_clk_source_clk            (GPIO_1[9]),    // ddr3_reader_gray_out_0_pixel_clk_source.clk
    .ddr3_reader_gray_out_0_pixel_source_valid              (GPIO_1[8]),      //     ddr3_reader_gray_out_0_pixel_source.valid
    .ddr3_reader_gray_out_0_pixel_source_data               (GPIO_1[7:0]),       //                                        .data
    .ddr3_reader_gray_out_0_wait_for_remap_wait             (1'b0),
    
    .pclk_out_clk                                       (slow_pclk)
    //##############################
 );

 //#############################
//New stuff

//assign GPIO_1[9] = ddr3_clk;

reg cam_sys_reset;
always @(posedge FPGA_CLK1_50) begin
    cam_sys_reset   <= (fpga_debounced_buttons[0]) && (!fpga_led_internal[7]);
end

assign GPIO[35:0] = 36'bzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz;

wire [9:0] pixel_0;
wire [9:0] pixel_1;
wire [9:0] pixel_2;
wire [9:0] pixel_3;

assign pixel_0 = {GPIO[29], GPIO[28], GPIO[31], GPIO[33], GPIO[32], GPIO[34], GPIO[35], 3'b100};
assign pixel_1 = {GPIO[19], GPIO[18], GPIO[21], GPIO[20], GPIO[22], GPIO[24], GPIO[25], 3'b100};
assign pixel_2 = {GPIO[10], GPIO[11], GPIO[12], GPIO[14], GPIO[15], GPIO[17], GPIO[16], 3'b100};
assign pixel_3 = {GPIO[7],  GPIO[6],  GPIO[5],  GPIO[2],  GPIO[3],  GPIO[1],  GPIO[0],  3'b100};

wire hsync_0, hsync_1, hsync_2, hsync_3;

assign hsync_0 = GPIO[26];
assign hsync_1 = GPIO[27];
assign hsync_2 = GPIO[8];
assign hsync_3 = GPIO[9];

wire pclk_0i, pclk_1i, pclk_2i, pclk_3i;

/*assign pclk_0 = GPIO[30]; right now using PLL
assign pclk_1 = GPIO[23];
assign pclk_2 = GPIO[13];
assign pclk_3 = GPIO[4];*/

pclk_clkctrl pclk_clkctrl_0 (
        .inclk  (GPIO[30]),  //  altclkctrl_input.inclk
        .outclk (pclk_0i)  // altclkctrl_output.outclk
    );

pclk_clkctrl pclk_clkctrl_1 (
        .inclk  (GPIO[23]),  //  altclkctrl_input.inclk
        .outclk (pclk_1i)  // altclkctrl_output.outclk
    );

pclk_clkctrl pclk_clkctrl_2 (
        .inclk  (GPIO[13]),  //  altclkctrl_input.inclk
        .outclk (pclk_2i)  // altclkctrl_output.outclk
    );

pclk_clkctrl pclk_clkctrl_3 (
        .inclk  (GPIO[4]),  //  altclkctrl_input.inclk
        .outclk (pclk_3i)  // altclkctrl_output.outclk
    );

wire pclk_0, pclk_1, pclk_2, pclk_3;

pclk_pll pclk_pll_0(
    .refclk(pclk_0i),
	.rst(1'b0),
	.outclk_0(pclk_0)
);


pclk_pll pclk_pll_1(
    .refclk(pclk_1i),
	.rst(1'b0),
	.outclk_0(pclk_1)
);


pclk_pll pclk_pll_2(
    .refclk(pclk_2i),
	.rst(1'b0),
	.outclk_0(pclk_2)
);


pclk_pll pclk_pll_3(
    .refclk(pclk_3i),
	.rst(1'b0),
	.outclk_0(pclk_3)
);

assign ARDUINO_IO[0] = 1'bz;

assign vsync = ARDUINO_IO[0]; //vsync
//assign ARDUINO_IO[1] scl
//assign ARDUINO_IO[2] sda_0
assign ARDUINO_IO[3] = sda_tocam ? 0 : 1'bz;  // sda_1
assign ARDUINO_IO[4] = sda_tocam ? 0 : 1'bz;  // sda_2
assign ARDUINO_IO[5] = sda_tocam ? 0 : 1'bz;  // sda_3
assign ARDUINO_IO[6] = (fpga_debounced_buttons[1]) && (!fpga_led_internal[6]); // RESET_N
//assign ARDUINO_IO[7] = xclk

wire scl_tocam, sda_tocam;
wire scl_fromcam, sda_fromcam;

assign scl_fromcam = !scl_tocam;
assign ARDUINO_IO[1] = !scl_tocam;

assign ARDUINO_IO[8] = sda_fromcam;
assign ARDUINO_IO[9] = scl_fromcam;
    
i2cbuf    i2cbuf_sda (
    .datain ( 1'b0 ),
    .oe ( sda_tocam ),
    .dataio ( ARDUINO_IO[2] ),
    .dataout ( sda_fromcam )
    );

pll_6  pll_6_inst(
    .refclk(fpga_clk_50),   //  refclk.clk
    .rst(1'b0),      //   reset.reset
    .outclk_0(ARDUINO_IO[7]), // outclk0.clk
    .outclk_1(slow_pclk), // 25 MHz for gray pixel output
    .outclk_2(ddr3_clk)
);

reg ddr3_reset;

always @(posedge ddr3_clk) begin
    ddr3_reset <= hps_fpga_reset_n;
end
    
 //#############################
    
// Debounce logic to clean out glitches within 1ms
debounce debounce_inst (
  .clk                                  (fpga_clk_50),
  .reset_n                              (hps_fpga_reset_n),
  .data_in                              (KEY),
  .data_out                             (fpga_debounced_buttons)
);
  defparam debounce_inst.WIDTH = 2;
  defparam debounce_inst.POLARITY = "LOW";
  defparam debounce_inst.TIMEOUT = 50000;               // at 50Mhz this is a debounce time of 1ms
  defparam debounce_inst.TIMEOUT_WIDTH = 16;            // ceil(log2(TIMEOUT))

// Source/Probe megawizard instance
hps_reset hps_reset_inst (
  .source_clk (fpga_clk_50),
  .source     (hps_reset_req)
);

altera_edge_detector pulse_cold_reset (
  .clk       (fpga_clk_50),
  .rst_n     (hps_fpga_reset_n),
  .signal_in (hps_reset_req[0]),
  .pulse_out (hps_cold_reset)
);
  defparam pulse_cold_reset.PULSE_EXT = 6;
  defparam pulse_cold_reset.EDGE_TYPE = 1;
  defparam pulse_cold_reset.IGNORE_RST_WHILE_BUSY = 1;

altera_edge_detector pulse_warm_reset (
  .clk       (fpga_clk_50),
  .rst_n     (hps_fpga_reset_n),
  .signal_in (hps_reset_req[1]),
  .pulse_out (hps_warm_reset)
);
  defparam pulse_warm_reset.PULSE_EXT = 2;
  defparam pulse_warm_reset.EDGE_TYPE = 1;
  defparam pulse_warm_reset.IGNORE_RST_WHILE_BUSY = 1;

altera_edge_detector pulse_debug_reset (
  .clk       (fpga_clk_50),
  .rst_n     (hps_fpga_reset_n),
  .signal_in (hps_reset_req[2]),
  .pulse_out (hps_debug_reset)
);
  defparam pulse_debug_reset.PULSE_EXT = 32;
  defparam pulse_debug_reset.EDGE_TYPE = 1;
  defparam pulse_debug_reset.IGNORE_RST_WHILE_BUSY = 1;

reg [25:0] counter;
reg  led_level;
always @    (posedge fpga_clk_50 or negedge hps_fpga_reset_n)
begin
if(~hps_fpga_reset_n)
begin
        counter<=0;
        led_level<=0;
end

else if(counter==24999999)
    begin
        counter<=0;
        led_level<=~led_level;
    end
else
        counter<=counter+1'b1;
end




endmodule
